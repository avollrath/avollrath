---
import NavBar from '../components/NavBar.astro';
import Footer from '../components/Footer.astro';
import { Tooltips } from "astro-tooltips";
import { ViewTransitions } from 'astro:transitions';

const { title, description } = Astro.props;

---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/src/styles/main.css" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <Tooltips theme="custom" delay={[50, 100]} placement="top" allowHTML={true} />
    <ViewTransitions />
  </head>
  <body class="dark:bg-dark-bg dark:text-white text-dark-text bg-gray-200 font-body">
    <div class="container mx-auto px-4 py-8 w-full max-w-1920 flex flex-col min-h-screen">
      <NavBar />

      <!-- Main content area with 12-column grid layout -->
      <main class="flex-grow">
        <div class="grid grid-cols-1 md:grid-cols-12 gap-8">
          <slot /> <!-- Slot for page-specific content -->
        </div>
      </main>

      <Footer />
    </div>
    <script type="module">
      // Function to update theme
      const updateTheme = () => {
        const theme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.classList.toggle('dark', theme === 'dark');

        const gradientElements = document.querySelectorAll('[data-border-gradient]');
        gradientElements.forEach(el => {
          el.classList.toggle('border-gradient', theme === 'dark');
        });
      };

      // Function to handle theme toggle click
      const handleToggleClick = () => {
        const isDark = document.documentElement.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        updateTheme();
      };

      // Initialize and attach listeners
      const init = () => {
        updateTheme();
        const themeToggle = document.getElementById('themeToggle');
        themeToggle && themeToggle.addEventListener('click', handleToggleClick);
      };

      // Check if document is already loaded
      if (document.readyState === 'loading') {  
        // Document is still loading, wait for it to complete
        document.addEventListener('DOMContentLoaded', init);
      } else {
        // Document is already loaded, initialize immediately
        init();
      }

      // Re-initialize on astro:after-swap
      document.addEventListener('astro:after-swap', init);
    </script>
    <script type="module" src="/src/scripts/interactiveSections.js"></script>
  </body>

</html>
